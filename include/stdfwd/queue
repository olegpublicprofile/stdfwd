#pragma once

#include "stdfwd_details.hpp"

//------------------------------------------------------------------------------

STDFWD_STD_BEGIN

	template< class T > class allocator;
	template< class T >	struct less;

	template< class T, class Allocator > class deque;
	template< class T, class Allocator > class vector;

	template< class T, class Container >
	class queue;

	template< class T, class Container, class Compare >
	class priority_queue;

STDFWD_STD_END

//------------------------------------------------------------------------------

namespace stdfwd
{
	template< class T, class Allocator = std::allocator< T > >
	using deque = std::deque< T, Allocator >;

	template< class T, class Container = deque< T > >
	using queue = std::queue< T, Container >;

	template< class T, class Allocator = std::allocator< T > >
	using vector = std::vector< T, Allocator >;

	template<
		class T,
		class Container = vector< T >,
		class Compare = std::less< typename Container::value_type >
	>
	using priority_queue = std::priority_queue< T, Container, Compare >;
}

//------------------------------------------------------------------------------
