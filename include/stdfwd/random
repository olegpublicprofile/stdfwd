#pragma once

#include "stdfwd_details.hpp"

#include "size_t"

//------------------------------------------------------------------------------

STDFWD_STD_BEGIN

	template<class UIntType, UIntType a, UIntType c, UIntType m>
	class linear_congruential_engine;

	template<class UIntType, size_t w, size_t n, size_t m, size_t r,
		   UIntType a, size_t u, UIntType d, size_t s,
		   UIntType b, size_t t,
		   UIntType c, size_t l, UIntType f
	> class mersenne_twister_engine;

	template<class UIntType, size_t w, size_t s, size_t r>
	class subtract_with_carry_engine;

	template<class Engine, size_t p, size_t r>
	class discard_block_engine;

	template<class Engine, size_t w, class UIntType>
	class independent_bits_engine;

	template<class Engine, size_t k>
	class shuffle_order_engine;


	#if defined (STDFWD_IS_LIBSTDCPP)
		#if __WORDSIZE == 64
			typedef unsigned long int	uint_fast32_t;
			typedef unsigned long int	uint_fast64_t;
		#else
			typedef unsigned int		uint_fast32_t;
			__extension__
			typedef unsigned long long int	uint_fast64_t;
		#endif
	#else
		typedef unsigned int uint32_t;
		typedef unsigned long long uint64_t;

		typedef uint32_t        uint_fast32_t;
		typedef uint64_t        uint_fast64_t;
	#endif


	typedef linear_congruential_engine<
		uint_fast32_t,
		16807UL,
		0UL,
		2147483647UL
	> minstd_rand0;

	typedef linear_congruential_engine<
		uint_fast32_t,
		48271UL,
		0UL,
		2147483647UL
	> minstd_rand;

	typedef mersenne_twister_engine<
	  uint_fast32_t,
	  32, 624, 397, 31,
	  0x9908b0dfUL, 11,
	  0xffffffffUL, 7,
	  0x9d2c5680UL, 15,
	  0xefc60000UL, 18, 1812433253UL
	> mt19937;

	typedef mersenne_twister_engine<
	  uint_fast64_t,
	  64, 312, 156, 31,
	  0xb5026f5aa96619e9ULL, 29,
	  0x5555555555555555ULL, 17,
	  0x71d67fffeda60000ULL, 37,
	  0xfff7eee000000000ULL, 43,
	  6364136223846793005ULL
	> mt19937_64;

	typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
	ranlux24_base;
	typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
	ranlux48_base;

	typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;
	typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;
	typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;
	#if defined(STDFWD_IS_LIBSTDCPP)
	typedef minstd_rand0 default_random_engine;
	#elif defined(STDFWD_IS_LIBCPP)
	typedef minstd_rand default_random_engine;
	#elif defined(STDFWD_IS_MSVC)
	typedef mt19937 default_random_engine;
	#endif

	class random_device;
	class seed_seq;
	class bernoulli_distribution;

	template<class IntType> class uniform_int_distribution;
	template<class IntType> class binomial_distribution;
	template<class IntType> class geometric_distribution;
	template<class IntType> class discrete_distribution;
	template<class IntType> class negative_binomial_distribution;
	template<class IntType> class poisson_distribution;

	template<class RealType> class uniform_real_distribution;
	template<class RealType> class exponential_distribution;
	template<class RealType> class gamma_distribution;
	template<class RealType> class weibull_distribution;
	template<class RealType> class extreme_value_distribution;
	template<class RealType> class normal_distribution;
	template<class RealType> class lognormal_distribution;
	template<class RealType> class chi_squared_distribution;
	template<class RealType> class cauchy_distribution;
	template<class RealType> class fisher_f_distribution;
	template<class RealType> class student_t_distribution;
	template<class RealType> class piecewise_constant_distribution;
	template<class RealType> class piecewise_linear_distribution;

STDFWD_STD_END

//------------------------------------------------------------------------------

namespace stdfwd
{
	template<class UIntType, UIntType a, UIntType c, UIntType m>
	using linear_congruential_engine = std::linear_congruential_engine<
		UIntType,a,c,m
	>;

	template<class UIntType, std::size_t w, std::size_t n, std::size_t m,
			 std::size_t r,
			 UIntType a, std::size_t u, UIntType d, std::size_t s,
			 UIntType b, std::size_t t,
			 UIntType c, std::size_t l, UIntType f>
	using mersenne_twister_engine = std::mersenne_twister_engine<
		UIntType, w, n, m, r, a, u, d, s, b, t, c, l, f
	>;

	template<class UIntType, std::size_t w, std::size_t s, std::size_t r>
	using subtract_with_carry_engine = std::subtract_with_carry_engine<
		UIntType, w, s, r
	>;

	template<class Engine, std::size_t p, std::size_t r>
	using discard_block_engine = std::discard_block_engine< Engine, p, r >;

	template<class Engine, std::size_t k>
	using shuffle_order_engine = std::shuffle_order_engine< Engine, k >;

	using std::minstd_rand0;
	using std::minstd_rand;
	using std::mt19937;
	using std::mt19937_64;
	using std::ranlux24_base;
	using std::ranlux48_base;
	using std::ranlux24;
	using std::ranlux48;
	using std::knuth_b;

	using std::random_device;
	using std::seed_seq;
	using std::bernoulli_distribution;

	using uniform_int_distribution = std::uniform_int_distribution< int >;
	using binomial_distribution = std::binomial_distribution< int >;
	using geometric_distribution = std::geometric_distribution< int >;
	using discrete_distribution = std::discrete_distribution< int >;
	using negative_binomial_distribution = std::negative_binomial_distribution< int >;
	using poisson_distribution = std::poisson_distribution< int >;

	using uniform_real_distribution = std::uniform_real_distribution< double >;
	using exponential_distribution = std::exponential_distribution< double >;
	using gamma_distribution = std::gamma_distribution< double >;
	using weibull_distribution = std::weibull_distribution< double >;
	using extreme_value_distribution = std::extreme_value_distribution< double >;
	using normal_distribution = std::normal_distribution< double >;
	using lognormal_distribution = std::lognormal_distribution< double >;
	using chi_squared_distribution = std::chi_squared_distribution< double >;
	using cauchy_distribution = std::cauchy_distribution< double >;
	using fisher_f_distribution = std::fisher_f_distribution< double >;
	using student_t_distribution = std::student_t_distribution< double >;
	using piecewise_constant_distribution = std::piecewise_constant_distribution< double >;
	using piecewise_linear_distribution = std::piecewise_linear_distribution< double >;

}
